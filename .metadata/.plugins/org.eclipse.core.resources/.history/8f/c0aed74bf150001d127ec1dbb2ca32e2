package _20221021;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.GridLayout;
import java.awt.PopupMenu;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JMenuItem;
import javax.swing.JPanel;
import javax.swing.JPopupMenu;
import javax.swing.JTextPane;
import javax.swing.border.LineBorder;
import javax.swing.border.MatteBorder;

public class SmallEditer extends JFrame implements ActionListener {

	JPanel menuPanel;
	JButton edit, copy, cut, paste, exit;
	JTextPane text;
	JPopupMenu popupMenu;
	JMenuItem jmCopy, jmCut, jmPaste;
	
	SmallEditer() {
		windows();
		pop();
		
		setVisible(true);
	}
	
	void windows() {
		LineBorder border = new LineBorder(Color.red,5);
		MatteBorder border2 = new MatteBorder(5,5,5,5,Color.pink);
		menuPanel = new JPanel();
		
		menuPanel.setLayout(new GridLayout(0,5));
		
		edit = new JButton("편집");
		copy = new JButton("복사");
		cut = new JButton("잘라내기");
		paste = new JButton("붙이기");
		exit = new JButton("종료");
		
		edit.addActionListener(this);
		copy.addActionListener(this);
		cut.addActionListener(this);
		paste.addActionListener(this);
		exit.addActionListener(this);
		
		menuPanel.add(edit);
		menuPanel.add(copy);
		menuPanel.add(cut);
		menuPanel.add(paste);
		menuPanel.add(exit);
		menuPanel.setBorder(border2);
		add(menuPanel,BorderLayout.NORTH);
		
		text = new JTextPane();
		text.setToolTipText("편집버튼 클릭하세요.");
		text.setSelectionColor(Color.blue);
		text.setSelectedTextColor(Color.white);
		text.setEditable(false);
		add(text);
		
		setTitle("편집기");
		setSize(600,600);
	}
	
	void pop() {
		popupMenu = new JPopupMenu();
		jmCopy = new JMenuItem("복사(C)");
		jmCut = new JMenuItem("잘라내기(X)");
		jmPaste = new JMenuItem("붙여넣기(V)");
		
		text.add(popupMenu);
		
		jmCopy.addActionListener(this);
		jmCut.addActionListener(this);
		jmPaste.addActionListener(this);
	}
	@Override
	public void actionPerformed(ActionEvent e) {
		if (e.getActionCommand() == "편집") {
			edit.setText("편집중");
			text.setEditable(true);
			edit.setBackground(Color.cyan);
		}
		else if (e.getActionCommand() == "편집중") {
			edit.setText("편집");
			text.setEditable(false);
			edit.setBackground(null);
		}
		
		if (e.getSource() == copy || e.getSource() == jmCopy) {
			text.copy();
		}
		
		if (e.getSource() == cut || e.getSource() == jmCut) {
			text.cut();
		}
		
		if (e.getSource() == paste || e.getSource() == jmPaste) {
			text.paste();
		}
		
		if (e.getSource() == exit) {
			System.exit(0);
			//this.dispose();
		}
	}
	public static void main(String[] args) {
		new SmallEditer();
	}
}
